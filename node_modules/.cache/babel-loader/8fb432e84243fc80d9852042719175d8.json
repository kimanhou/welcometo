{"ast":null,"code":"import { FieldType } from \"./deserialization/FieldType\";\nimport JsonDeserializationHelper from \"./deserialization/JsonDeserializationHelper\";\nimport Location from './Location';\nimport parosData from '../data/photos.json';\nimport Encrypt from \"../business/Encrypt\";\nexport default class Album {\n  constructor(test, name, locations) {\n    this.test = void 0;\n    this.name = void 0;\n    this.locations = void 0;\n    this.test = test;\n    this.name = name;\n    this.locations = locations;\n  }\n\n}\n\nAlbum.deserialize = json => {\n  const test = JsonDeserializationHelper.assertField(json, 'test', FieldType.STRING);\n  const name = JsonDeserializationHelper.assertField(json, 'name', FieldType.STRING);\n  const locations = JsonDeserializationHelper.assertField(json, 'locations', FieldType.ARRAY(Location.deserialize));\n  return new Album(test, name, locations);\n};\n\nAlbum.PAROS_ALBUM = Album.deserialize(parosData);\n\nAlbum.albums = (() => {\n  return Object.values(Album).filter(x => x instanceof Album).map(x => x);\n})();\n\nAlbum.getAlbum = key => {\n  console.log(`bacon ? ${Encrypt.decrypt(\"U2FsdGVkX19jCqMhPjUS/CcVvQAUkyxmcmGlNBnd1IY=\", key)}`);\n  const album = Album.albums.filter(x => Encrypt.decrypt(x.test, key) === \"bacon\")[0];\n  return album != null ? album : null;\n};","map":{"version":3,"sources":["/Users/kimanhnguyen/Documents/Sites/paros/Code/src/model/Album.ts"],"names":["FieldType","JsonDeserializationHelper","Location","parosData","Encrypt","Album","constructor","test","name","locations","deserialize","json","assertField","STRING","ARRAY","PAROS_ALBUM","albums","Object","values","filter","x","map","getAlbum","key","console","log","decrypt","album"],"mappings":"AAAA,SAASA,SAAT,QAA0B,6BAA1B;AACA,OAAOC,yBAAP,MAAsC,6CAAtC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,eAAe,MAAMC,KAAN,CAAY;AAKvBC,EAAAA,WAAW,CAACC,IAAD,EAAgBC,IAAhB,EAA+BC,SAA/B,EAAuD;AAAA,SAJzDF,IAIyD;AAAA,SAHzDC,IAGyD;AAAA,SAFzDC,SAEyD;AAC9D,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AATsB;;AAANJ,K,CAWVK,W,GAAeC,IAAD,IAAgB;AACjC,QAAMJ,IAAI,GAAGN,yBAAyB,CAACW,WAA1B,CAAsCD,IAAtC,EAA4C,MAA5C,EAAoDX,SAAS,CAACa,MAA9D,CAAb;AACA,QAAML,IAAI,GAAGP,yBAAyB,CAACW,WAA1B,CAAsCD,IAAtC,EAA4C,MAA5C,EAAoDX,SAAS,CAACa,MAA9D,CAAb;AACA,QAAMJ,SAAS,GAAGR,yBAAyB,CAACW,WAA1B,CAAsCD,IAAtC,EAA4C,WAA5C,EAAyDX,SAAS,CAACc,KAAV,CAAgBZ,QAAQ,CAACQ,WAAzB,CAAzD,CAAlB;AAEA,SAAO,IAAIL,KAAJ,CAAUE,IAAV,EAAgBC,IAAhB,EAAsBC,SAAtB,CAAP;AACH,C;;AAjBgBJ,K,CAmBVU,W,GAAcV,KAAK,CAACK,WAAN,CAAkBP,SAAlB,C;;AAnBJE,K,CAqBVW,M,GAAS,CAAC,MAAM;AACnB,SAAOC,MAAM,CAACC,MAAP,CAAcb,KAAd,EACFc,MADE,CACKC,CAAC,IAAIA,CAAC,YAAYf,KADvB,EAEFgB,GAFE,CAEED,CAAC,IAAIA,CAFP,CAAP;AAGH,CAJe,G;;AArBCf,K,CA2BViB,Q,GAAYC,GAAD,IAAkB;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAa,WAAUrB,OAAO,CAACsB,OAAR,CAAgB,8CAAhB,EAAgEH,GAAhE,CAAqE,EAA5F;AACA,QAAMI,KAAK,GAAGtB,KAAK,CAACW,MAAN,CAAaG,MAAb,CAAoBC,CAAC,IAAIhB,OAAO,CAACsB,OAAR,CAAgBN,CAAC,CAACb,IAAlB,EAAwBgB,GAAxB,MAAiC,OAA1D,EAAmE,CAAnE,CAAd;AACA,SAAOI,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,IAA/B;AACH,C","sourcesContent":["import { FieldType } from \"./deserialization/FieldType\";\nimport JsonDeserializationHelper from \"./deserialization/JsonDeserializationHelper\";\nimport Location from './Location';\nimport parosData from '../data/photos.json';\nimport Encrypt from \"../business/Encrypt\";\n\nexport default class Album {\n    readonly test : string;\n    readonly name : string;\n    readonly locations : Location[];\n\n    constructor(test : string, name : string, locations : Location[]) {\n        this.test = test;\n        this.name = name;\n        this.locations = locations;\n    }\n\n    static deserialize = (json : any) => {\n        const test = JsonDeserializationHelper.assertField(json, 'test', FieldType.STRING);\n        const name = JsonDeserializationHelper.assertField(json, 'name', FieldType.STRING);\n        const locations = JsonDeserializationHelper.assertField(json, 'locations', FieldType.ARRAY(Location.deserialize));\n\n        return new Album(test, name, locations);\n    }\n\n    static PAROS_ALBUM = Album.deserialize(parosData);\n\n    static albums = (() => {\n        return Object.values(Album)\n            .filter(x => x instanceof Album)\n            .map(x => x as Album)\n    })();\n\n    static getAlbum = (key : string) => {\n        console.log(`bacon ? ${Encrypt.decrypt(\"U2FsdGVkX19jCqMhPjUS/CcVvQAUkyxmcmGlNBnd1IY=\", key)}`);\n        const album = Album.albums.filter(x => Encrypt.decrypt(x.test, key) === \"bacon\")[0];\n        return album != null ? album : null;\n    }\n}"]},"metadata":{},"sourceType":"module"}