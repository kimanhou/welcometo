{"ast":null,"code":"var FieldTypeEnum;\n\n(function (FieldTypeEnum) {\n  FieldTypeEnum[\"STRING\"] = \"STRING\";\n  FieldTypeEnum[\"NUMBER\"] = \"NUMBER\";\n  FieldTypeEnum[\"BOOLEAN\"] = \"BOOLEAN\";\n  FieldTypeEnum[\"DATE\"] = \"DATE\";\n  FieldTypeEnum[\"OBJECT\"] = \"OBJECT\";\n  FieldTypeEnum[\"ARRAY\"] = \"ARRAY\";\n  FieldTypeEnum[\"ENUM\"] = \"ENUM\";\n})(FieldTypeEnum || (FieldTypeEnum = {}));\n\nexport class FieldType {\n  constructor(_value, handler) {\n    this.value = void 0;\n    this.handler = void 0;\n\n    this.assertType = json => {\n      switch (this.value) {\n        case FieldTypeEnum.STRING:\n          json = this.castToString(json);\n          break;\n\n        case FieldTypeEnum.NUMBER:\n          json = this.castToNumber(json);\n          break;\n\n        case FieldTypeEnum.BOOLEAN:\n          json = this.castToBoolean(json);\n          break;\n\n        case FieldTypeEnum.DATE:\n          json = this.castToDate(json);\n          break;\n\n        case FieldTypeEnum.OBJECT:\n          json = this.castToObject(json);\n          break;\n\n        case FieldTypeEnum.ARRAY:\n          json = this.castToArray(json);\n          break;\n\n        case FieldTypeEnum.ENUM:\n          json = this.castToEnum(json);\n          break;\n      }\n\n      return json;\n    };\n\n    this.castToString = value => {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      throw new Error(`${value} is not a string.`);\n    };\n\n    this.castToNumber = value => {\n      if (typeof value === 'string') {\n        const floatValue = parseFloat(value);\n\n        if (isNaN(floatValue)) {\n          throw new Error(`${value} is not a number.`);\n        }\n\n        return floatValue;\n      }\n\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      throw new Error(`${value} is not a number.`);\n    };\n\n    this.castToBoolean = value => {\n      if (typeof value === 'string') {\n        if (value.toLowerCase() === \"true\") {\n          return true;\n        }\n\n        if (value.toLowerCase() === \"false\") {\n          return false;\n        }\n\n        throw new Error(`${value} is not a boolean.`);\n      }\n\n      if (typeof value === 'boolean') {\n        return value;\n      }\n\n      throw new Error(`${value} is not a boolean.`);\n    };\n\n    this.castToDate = value => {\n      if (typeof value === 'string') {\n        const numericDate = Date.parse(value);\n\n        if (isNaN(numericDate)) {\n          throw new Error(`${value} is not a date.`);\n        }\n\n        return new Date(numericDate);\n      }\n\n      if (typeof value === 'object') {\n        if (value instanceof Date) {\n          return value;\n        }\n      }\n\n      throw new Error(`${value} is not a date.`);\n    };\n\n    this.castToObject = value => {\n      if (typeof value === 'object' && this.handler != null) {\n        return this.handler(value);\n      }\n\n      throw new Error(`${value} is not an object.`);\n    };\n\n    this.castToArray = value => {\n      if (typeof value === 'object' && this.handler != null && Array.isArray(value)) {\n        return value.map(x => this.handler(x));\n      }\n\n      throw new Error(`${value} is not an array.`);\n    };\n\n    this.castToEnum = value => {\n      if (typeof value === 'string' && this.handler != null) {\n        return this.handler(value);\n      }\n\n      throw new Error(`${value} is not a string.`);\n    };\n\n    this.value = _value;\n    this.handler = handler;\n  }\n\n}\nFieldType.STRING = new FieldType(FieldTypeEnum.STRING);\nFieldType.NUMBER = new FieldType(FieldTypeEnum.NUMBER);\nFieldType.BOOLEAN = new FieldType(FieldTypeEnum.BOOLEAN);\nFieldType.DATE = new FieldType(FieldTypeEnum.DATE);\n\nFieldType.OBJECT = handler => new FieldType(FieldTypeEnum.OBJECT, handler);\n\nFieldType.ARRAY = handler => new FieldType(FieldTypeEnum.ARRAY, handler);\n\nFieldType.ENUM = handler => new FieldType(FieldTypeEnum.ENUM, handler);","map":{"version":3,"sources":["/Users/kimanhnguyen/Documents/Sites/paros/Code/src/model/deserialization/FieldType.ts"],"names":["FieldTypeEnum","FieldType","constructor","value","handler","assertType","json","STRING","castToString","NUMBER","castToNumber","BOOLEAN","castToBoolean","DATE","castToDate","OBJECT","castToObject","ARRAY","castToArray","ENUM","castToEnum","Error","floatValue","parseFloat","isNaN","toLowerCase","numericDate","Date","parse","Array","isArray","map","x"],"mappings":"IAEKA,a;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAUL,OAAO,MAAMC,SAAN,CAA4B;AAI/BC,EAAAA,WAAW,CAACC,MAAD,EAAwBC,OAAxB,EAAwD;AAAA,SAHnED,KAGmE;AAAA,SAFnEC,OAEmE;;AAAA,SAKnEC,UALmE,GAKrDC,IAAD,IAAgB;AACzB,cAAO,KAAKH,KAAZ;AACI,aAAKH,aAAa,CAACO,MAAnB;AACID,UAAAA,IAAI,GAAG,KAAKE,YAAL,CAAkBF,IAAlB,CAAP;AACA;;AACJ,aAAKN,aAAa,CAACS,MAAnB;AACIH,UAAAA,IAAI,GAAG,KAAKI,YAAL,CAAkBJ,IAAlB,CAAP;AACA;;AACJ,aAAKN,aAAa,CAACW,OAAnB;AACIL,UAAAA,IAAI,GAAG,KAAKM,aAAL,CAAmBN,IAAnB,CAAP;AACA;;AACJ,aAAKN,aAAa,CAACa,IAAnB;AACIP,UAAAA,IAAI,GAAG,KAAKQ,UAAL,CAAgBR,IAAhB,CAAP;AACA;;AACJ,aAAKN,aAAa,CAACe,MAAnB;AACIT,UAAAA,IAAI,GAAG,KAAKU,YAAL,CAAkBV,IAAlB,CAAP;AACA;;AACJ,aAAKN,aAAa,CAACiB,KAAnB;AACIX,UAAAA,IAAI,GAAG,KAAKY,WAAL,CAAiBZ,IAAjB,CAAP;AACA;;AACJ,aAAKN,aAAa,CAACmB,IAAnB;AACIb,UAAAA,IAAI,GAAG,KAAKc,UAAL,CAAgBd,IAAhB,CAAP;AACA;AArBR;;AAuBA,aAAOA,IAAP;AACH,KA9BkE;;AAAA,SAgC3DE,YAhC2D,GAgC3CL,KAAD,IAAiB;AACpC,UAAG,OAAOA,KAAP,KAAiB,QAApB,EAA6B;AACzB,eAAOA,KAAP;AACH;;AACD,YAAM,IAAIkB,KAAJ,CAAW,GAAElB,KAAM,mBAAnB,CAAN;AACH,KArCkE;;AAAA,SAuC3DO,YAvC2D,GAuC3CP,KAAD,IAAiB;AACpC,UAAG,OAAOA,KAAP,KAAiB,QAApB,EAA6B;AACzB,cAAMmB,UAAU,GAAGC,UAAU,CAACpB,KAAD,CAA7B;;AACA,YAAGqB,KAAK,CAACF,UAAD,CAAR,EAAqB;AACjB,gBAAM,IAAID,KAAJ,CAAW,GAAElB,KAAM,mBAAnB,CAAN;AACH;;AACD,eAAOmB,UAAP;AACH;;AACD,UAAG,OAAOnB,KAAP,KAAiB,QAApB,EAA6B;AACzB,eAAOA,KAAP;AACH;;AACD,YAAM,IAAIkB,KAAJ,CAAW,GAAElB,KAAM,mBAAnB,CAAN;AACH,KAnDkE;;AAAA,SAqD3DS,aArD2D,GAqD1CT,KAAD,IAAiB;AACrC,UAAG,OAAOA,KAAP,KAAiB,QAApB,EAA6B;AACzB,YAAGA,KAAK,CAACsB,WAAN,OAAwB,MAA3B,EAAkC;AAC9B,iBAAO,IAAP;AACH;;AACD,YAAGtB,KAAK,CAACsB,WAAN,OAAwB,OAA3B,EAAmC;AAC/B,iBAAO,KAAP;AACH;;AACD,cAAM,IAAIJ,KAAJ,CAAW,GAAElB,KAAM,oBAAnB,CAAN;AACH;;AACD,UAAG,OAAOA,KAAP,KAAiB,SAApB,EAA8B;AAC1B,eAAOA,KAAP;AACH;;AACD,YAAM,IAAIkB,KAAJ,CAAW,GAAElB,KAAM,oBAAnB,CAAN;AACH,KAnEkE;;AAAA,SAqE3DW,UArE2D,GAqE7CX,KAAD,IAAiB;AAClC,UAAG,OAAOA,KAAP,KAAiB,QAApB,EAA6B;AACzB,cAAMuB,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWzB,KAAX,CAApB;;AACA,YAAGqB,KAAK,CAACE,WAAD,CAAR,EAAsB;AAClB,gBAAM,IAAIL,KAAJ,CAAW,GAAElB,KAAM,iBAAnB,CAAN;AACH;;AACD,eAAO,IAAIwB,IAAJ,CAASD,WAAT,CAAP;AACH;;AACD,UAAG,OAAOvB,KAAP,KAAiB,QAApB,EAA6B;AACzB,YAAGA,KAAK,YAAYwB,IAApB,EAAyB;AACrB,iBAAOxB,KAAP;AACH;AACJ;;AACD,YAAM,IAAIkB,KAAJ,CAAW,GAAElB,KAAM,iBAAnB,CAAN;AACH,KAnFkE;;AAAA,SAqF3Da,YArF2D,GAqF3Cb,KAAD,IAAsB;AACzC,UAAG,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,KAAKC,OAAL,IAAgB,IAAhD,EAAqD;AACjD,eAAO,KAAKA,OAAL,CAAaD,KAAb,CAAP;AACH;;AACD,YAAM,IAAIkB,KAAJ,CAAW,GAAElB,KAAM,oBAAnB,CAAN;AACH,KA1FkE;;AAAA,SA4F3De,WA5F2D,GA4F5Cf,KAAD,IAAwB;AAC1C,UAAG,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,KAAKC,OAAL,IAAgB,IAA7C,IACIyB,KAAK,CAACC,OAAN,CAAc3B,KAAd,CADP,EAC4B;AACxB,eAAOA,KAAK,CAAC4B,GAAN,CAAUC,CAAC,IAAI,KAAK5B,OAAL,CAAc4B,CAAd,CAAf,CAAP;AACH;;AACD,YAAM,IAAIX,KAAJ,CAAW,GAAElB,KAAM,mBAAnB,CAAN;AACH,KAlGkE;;AAAA,SAoG3DiB,UApG2D,GAoG7CjB,KAAD,IAAiB;AAClC,UAAG,OAAOA,KAAP,KAAiB,QAAjB,IACI,KAAKC,OAAL,IAAgB,IADvB,EAC4B;AACxB,eAAO,KAAKA,OAAL,CAAaD,KAAb,CAAP;AACH;;AACD,YAAM,IAAIkB,KAAJ,CAAW,GAAElB,KAAM,mBAAnB,CAAN;AACH,KA1GkE;;AAC/D,SAAKA,KAAL,GAAaA,MAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AAP8B;AAAtBH,S,CAgHFM,M,GAAS,IAAIN,SAAJ,CAAsBD,aAAa,CAACO,MAApC,C;AAhHPN,S,CAiHFQ,M,GAAS,IAAIR,SAAJ,CAAsBD,aAAa,CAACS,MAApC,C;AAjHPR,S,CAkHFU,O,GAAU,IAAIV,SAAJ,CAAuBD,aAAa,CAACW,OAArC,C;AAlHRV,S,CAmHFY,I,GAAO,IAAIZ,SAAJ,CAAoBD,aAAa,CAACa,IAAlC,C;;AAnHLZ,S,CAoHFc,M,GAAcX,OAAL,IAAuC,IAAIH,SAAJ,CAAiBD,aAAa,CAACe,MAA/B,EAAuCX,OAAvC,C;;AApH9CH,S,CAqHFgB,K,GAAab,OAAL,IAAuC,IAAIH,SAAJ,CAAsBD,aAAa,CAACiB,KAApC,EAA2Cb,OAA3C,C;;AArH7CH,S,CAsHFkB,I,GAAYf,OAAL,IAAuC,IAAIH,SAAJ,CAAiBD,aAAa,CAACmB,IAA/B,EAAqCf,OAArC,C","sourcesContent":["export type FieldHandlerType<T> = (json : any) => T;\n\nenum FieldTypeEnum{\n    STRING = \"STRING\",\n    NUMBER = \"NUMBER\",\n    BOOLEAN = \"BOOLEAN\",\n    DATE = \"DATE\",\n    OBJECT = \"OBJECT\",\n    ARRAY = \"ARRAY\",\n    ENUM = \"ENUM\",\n}\n\nexport class FieldType<IT, OT = IT>{\n    value : FieldTypeEnum;\n    handler ?: FieldHandlerType<IT>;\n\n    constructor(value : FieldTypeEnum, handler ?: FieldHandlerType<IT>){\n        this.value = value;\n        this.handler = handler;\n    }\n\n    assertType = (json : any) => {\n        switch(this.value){\n            case FieldTypeEnum.STRING:\n                json = this.castToString(json);\n                break;\n            case FieldTypeEnum.NUMBER:\n                json = this.castToNumber(json);\n                break;\n            case FieldTypeEnum.BOOLEAN:\n                json = this.castToBoolean(json);\n                break;\n            case FieldTypeEnum.DATE:\n                json = this.castToDate(json);\n                break;\n            case FieldTypeEnum.OBJECT:\n                json = this.castToObject(json);\n                break;\n            case FieldTypeEnum.ARRAY:\n                json = this.castToArray(json);\n                break;\n            case FieldTypeEnum.ENUM:\n                json = this.castToEnum(json);\n                break;\n        }\n        return json as OT;\n    }\n\n    private castToString = (value : any) => {\n        if(typeof value === 'string'){\n            return value;\n        }\n        throw new Error(`${value} is not a string.`);\n    }\n    \n    private castToNumber = (value : any) => {\n        if(typeof value === 'string'){\n            const floatValue = parseFloat(value);\n            if(isNaN(floatValue)){\n                throw new Error(`${value} is not a number.`)\n            }\n            return floatValue;\n        }\n        if(typeof value === 'number'){\n            return value;\n        }\n        throw new Error(`${value} is not a number.`);\n    }\n    \n    private castToBoolean = (value : any) => {\n        if(typeof value === 'string'){\n            if(value.toLowerCase() === \"true\"){\n                return true;\n            }\n            if(value.toLowerCase() === \"false\"){\n                return false;\n            }\n            throw new Error(`${value} is not a boolean.`);\n        }\n        if(typeof value === 'boolean'){\n            return value;\n        }\n        throw new Error(`${value} is not a boolean.`);\n    }\n    \n    private castToDate = (value : any) => {\n        if(typeof value === 'string'){\n            const numericDate = Date.parse(value);\n            if(isNaN(numericDate)){\n                throw new Error(`${value} is not a date.`)\n            }\n            return new Date(numericDate);\n        }\n        if(typeof value === 'object'){\n            if(value instanceof Date){\n                return value;\n            }\n        }\n        throw new Error(`${value} is not a date.`);\n    }\n    \n    private castToObject = (value : any) : IT => {\n        if(typeof value === 'object' && this.handler != null){\n            return this.handler(value);\n        }\n        throw new Error(`${value} is not an object.`);\n    }\n    \n    private castToArray = (value : any) : IT[] => {\n        if(typeof value === 'object' && this.handler != null\n            && Array.isArray(value)){\n            return value.map(x => this.handler!(x));\n        }\n        throw new Error(`${value} is not an array.`);\n    }\n\n    private castToEnum = (value : any) => {\n        if(typeof value === 'string'\n            && this.handler != null){\n            return this.handler(value);\n        }\n        throw new Error(`${value} is not a string.`);\n    }\n\n    static STRING = new FieldType<string>(FieldTypeEnum.STRING);\n    static NUMBER = new FieldType<number>(FieldTypeEnum.NUMBER);\n    static BOOLEAN = new FieldType<boolean>(FieldTypeEnum.BOOLEAN);\n    static DATE = new FieldType<Date>(FieldTypeEnum.DATE);\n    static OBJECT = <T> (handler : FieldHandlerType<T>) => new FieldType<T>(FieldTypeEnum.OBJECT, handler);\n    static ARRAY = <T> (handler : FieldHandlerType<T>) => new FieldType<T, T[]>(FieldTypeEnum.ARRAY, handler);\n    static ENUM = <T> (handler : FieldHandlerType<T>) => new FieldType<T>(FieldTypeEnum.ENUM, handler);\n}"]},"metadata":{},"sourceType":"module"}