{"ast":null,"code":"class JsonDeserializationHelper {\n  constructor() {\n    this.assertFieldExists = (json, field) => {\n      const rawValue = json[field];\n\n      if (rawValue == null) {\n        throw new Error(`Field ${field} did not exist.`);\n      }\n\n      return rawValue;\n    };\n\n    this.assertField = (json, field, type) => {\n      this.assertFieldExists(json, field);\n      const value = type.assertType(json[field]);\n      return value;\n    };\n\n    this.assertFieldOrDefault = (json, field, type, defaultValue) => {\n      const value = this.assertOptionalField(json, field, type);\n\n      if (value == null) {\n        return defaultValue;\n      }\n\n      return value;\n    };\n\n    this.assertOptionalField = (json, field, type) => {\n      let value = undefined;\n      const rawValue = json[field];\n\n      if (rawValue != null) {\n        value = this.assertField(json, field, type);\n      }\n\n      return value;\n    };\n\n    this.assertOptionalNullField = (json, field, type) => {\n      const optionalValue = this.assertOptionalField(json, field, type);\n      return optionalValue != null ? optionalValue : null;\n    };\n  }\n\n}\n\nexport default new JsonDeserializationHelper();","map":{"version":3,"sources":["/Users/kimanhnguyen/Documents/Sites/paros/Code/src/model/deserialization/JsonDeserializationHelper.ts"],"names":["JsonDeserializationHelper","assertFieldExists","json","field","rawValue","Error","assertField","type","value","assertType","assertFieldOrDefault","defaultValue","assertOptionalField","undefined","assertOptionalNullField","optionalValue"],"mappings":"AAEA,MAAMA,yBAAN,CAAgC;AAAA;AAAA,SAE5BC,iBAF4B,GAER,CAACC,IAAD,EAAaC,KAAb,KAAgC;AAChD,YAAMC,QAAQ,GAAGF,IAAI,CAACC,KAAD,CAArB;;AACA,UAAGC,QAAQ,IAAI,IAAf,EAAoB;AAChB,cAAM,IAAIC,KAAJ,CAAW,SAAQF,KAAM,iBAAzB,CAAN;AACH;;AACD,aAAOC,QAAP;AACH,KAR2B;;AAAA,SAU5BE,WAV4B,GAUd,CAAUJ,IAAV,EAAsBC,KAAtB,EAAsCI,IAAtC,KAAmE;AAC7E,WAAKN,iBAAL,CAAuBC,IAAvB,EAA6BC,KAA7B;AACA,YAAMK,KAAK,GAAGD,IAAI,CAACE,UAAL,CAAgBP,IAAI,CAACC,KAAD,CAApB,CAAd;AACA,aAAOK,KAAP;AACH,KAd2B;;AAAA,SAgB5BE,oBAhB4B,GAgBL,CAAUR,IAAV,EAAsBC,KAAtB,EAAsCI,IAAtC,EAAgEI,YAAhE,KAAsF;AACzG,YAAMH,KAAK,GAAG,KAAKI,mBAAL,CAAyBV,IAAzB,EAA+BC,KAA/B,EAAsCI,IAAtC,CAAd;;AACA,UAAGC,KAAK,IAAI,IAAZ,EAAiB;AACb,eAAOG,YAAP;AACH;;AACD,aAAOH,KAAP;AACH,KAtB2B;;AAAA,SAwB5BI,mBAxB4B,GAwBN,CAAUV,IAAV,EAAsBC,KAAtB,EAAsCI,IAAtC,KAAmE;AACrF,UAAIC,KAAK,GAAGK,SAAZ;AACA,YAAMT,QAAQ,GAAGF,IAAI,CAACC,KAAD,CAArB;;AACA,UAAGC,QAAQ,IAAI,IAAf,EAAoB;AAChBI,QAAAA,KAAK,GAAG,KAAKF,WAAL,CAAiBJ,IAAjB,EAAuBC,KAAvB,EAA8BI,IAA9B,CAAR;AACH;;AACD,aAAOC,KAAP;AACH,KA/B2B;;AAAA,SAiC5BM,uBAjC4B,GAiCF,CAAUZ,IAAV,EAAsBC,KAAtB,EAAsCI,IAAtC,KAAmE;AACzF,YAAMQ,aAAa,GAAG,KAAKH,mBAAL,CAAyBV,IAAzB,EAA+BC,KAA/B,EAAsCI,IAAtC,CAAtB;AACA,aAAQQ,aAAa,IAAI,IAAlB,GAAyBA,aAAzB,GAAyC,IAAhD;AACH,KApC2B;AAAA;;AAAA;;AAsChC,eAAe,IAAIf,yBAAJ,EAAf","sourcesContent":["import { FieldType } from \"./FieldType\";\n\nclass JsonDeserializationHelper {\n    \n    assertFieldExists = (json : any, field : string) => {\n        const rawValue = json[field];\n        if(rawValue == null){\n            throw new Error(`Field ${field} did not exist.`);\n        }\n        return rawValue;\n    }\n\n    assertField = <IT, OT> (json : any, field : string, type : FieldType<IT, OT>) => {\n        this.assertFieldExists(json, field);\n        const value = type.assertType(json[field]);\n        return value;\n    }\n\n    assertFieldOrDefault = <IT, OT> (json : any, field : string, type : FieldType<IT, OT>, defaultValue : OT) => {\n        const value = this.assertOptionalField(json, field, type);\n        if(value == null){\n            return defaultValue;\n        }\n        return value;\n    }\n\n    assertOptionalField = <IT, OT> (json : any, field : string, type : FieldType<IT, OT>) => {\n        let value = undefined;\n        const rawValue = json[field];\n        if(rawValue != null){\n            value = this.assertField(json, field, type);\n        }\n        return value;\n    }\n\n    assertOptionalNullField = <IT, OT> (json : any, field : string, type : FieldType<IT, OT>) => {\n        const optionalValue = this.assertOptionalField(json, field, type);\n        return (optionalValue != null)?(optionalValue):(null);\n    }\n}\nexport default new JsonDeserializationHelper();"]},"metadata":{},"sourceType":"module"}